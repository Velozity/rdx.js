// @generated by rootSdk Generator
// DO NOT HAND EDIT
// tslint: disable

import {
  EchoEvent,
	EchoRequest,
	EchoResponse,
	Void
} from "@rdx.js-example/gen-shared"
import {
  EventEmitter,
	IRootClient,
	RootClientService,
	TypedEventEmitter,
	UntypedClientMethodDefinition,
	rootClient
} from "@rootsdk/client-app"

export enum EchoServiceClientEvent {
		Message = 'broadcastMessage'
}
export type EchoServiceClientEvents = {
		'broadcastMessage': (event: EchoEvent) => void
}

export class EchoServiceClient extends (EventEmitter as new() => TypedEventEmitter<EchoServiceClientEvents>) implements RootClientService
 {
  constructor() { super(); }
 
	public get ClientServiceName(): string {
		return "EchoServiceClient";
	}

  echo(request: EchoRequest):Promise<EchoResponse> {
		return (<any>rootClient).sendWithResponse('/.EchoService/Echo',request, this.echo);
	}
	private __register(): UntypedClientMethodDefinition[] {
		return [	{
      serviceName: 'EchoServiceClient',
			methodName: 'Echo',
			path: '/.EchoService/Echo',
			requestSerialize: value => EchoRequest.toBinary(value),
			responseDeserialize: bytes => EchoResponse.fromBinary(bytes)
    },
		{
			serviceName: "EchoServiceClient",
      methodName: "BroadcastMessage",
      path: '/.EchoService/BroadcastMessage',
      funct: (e: EchoEvent) => { this.emit(EchoServiceClientEvent.Message,e) },
      responseDeserialize: bytes => EchoEvent.fromBinary(bytes)
    },
	]}
}

export const echoServiceClient = new EchoServiceClient();

(<IRootClient><unknown>rootClient).addClient(echoServiceClient);

